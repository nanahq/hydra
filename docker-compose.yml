services:
  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    command: 'yarn start:dev api-gateway'
    env_file:
      - ./apps/api-gateway/.env
    depends_on:
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    networks:
      - nana-app

#  admin-gateway:
#    build:
#      context: .
#      dockerfile: ./apps/admin-gateway/Dockerfile
#      target: development
#    command: 'yarn start:dev admin-gateway'
#    env_file:
#      - ./apps/admin-gateway/.env
#    depends_on:
#      - rabbitmq
#    volumes:
#      - '.:/usr/src/app'
#      - /usr/src/app/node_modules
#    ports:
#      - '3002:3002'
#    networks:
#      - nana-app

  vendor-gateway:
    build:
      context: .
      dockerfile: ./apps/vendor-gateway/Dockerfile
      target: development
    command: 'yarn start:dev vendor-gateway'
    env_file:
      - ./apps/vendor-gateway/.env
    depends_on:
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'
    networks:
      - nana-app

#  admin-service:
#    build:
#      context: .
#      dockerfile: ./apps/admin-service/Dockerfile
#      target: development
#    command: 'yarn start:dev admin-service'
#    env_file:
#      - ./apps/admin-service/.env
#    depends_on:
#      - api-gateway
#      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
#      - rabbitmq
#    volumes:
#      - '.:/usr/src/app'
#      - /usr/src/app/node_modules
#    networks:
#      - nana-app

  users-service:
    build:
      context: .
      dockerfile: ./apps/users-service/Dockerfile
      target: development
    command: 'yarn start:dev users-service'
    env_file:
      - ./apps/users-service/.env
    depends_on:
      - api-gateway
      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  vendors-service:
    build:
      context: .
      dockerfile: ./apps/vendors-service/Dockerfile
      target: development
    command: 'yarn start:dev vendors-service'
    env_file:
      - ./apps/vendors-service/.env
    depends_on:
      - vendor-gateway
      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  notification-service:
    build:
      context: .
      dockerfile: ./apps/notification-service/Dockerfile
      target: development
    command: 'yarn start:dev notification-service'
    env_file:
      - ./apps/notification-service/.env
    depends_on:
      - api-gateway
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  orders-service:
    build:
      context: .
      dockerfile: apps/orders-service/Dockerfile
      target: development
    command: 'yarn start:dev orders-service'
    env_file:
      - apps/orders-service/.env
    depends_on:
      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
      - api-gateway
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  listings-service:
    build:
      context: .
      dockerfile: apps/listings-service/Dockerfile
      target: development
    command: 'yarn start:dev listings-service'
    env_file:
      - apps/listings-service/.env
    depends_on:
      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
      - api-gateway
      - vendor-gateway
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  payment-service:
    build:
      context: .
      dockerfile: apps/payment-service/Dockerfile
      target: development
    command: 'yarn start:dev payment-service'
    env_file:
      - apps/payment-service/.env
    depends_on:
      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
      - api-gateway
      - vendor-gateway
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  reviews-service:
    build:
      context: .
      dockerfile: apps/reviews-service/Dockerfile
      target: development
    command: 'yarn start:dev reviews-service'
    env_file:
      - apps/reviews-service/.env
    depends_on:
      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
      - api-gateway
      - vendor-gateway
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  drivers-service:
    build:
      context: .
      dockerfile: apps/drivers-service/Dockerfile
      target: development
    command: 'yarn start:dev drivers-service'
    env_file:
      - apps/drivers-service/.env
    depends_on:
      - mongodb-primary
#      - mongodb-secondary
#      - mongodb-arbiter
      - rabbitmq
    ports:
      - '3003:3003'
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app

  location-service:
    build:
      context: .
      dockerfile: apps/location-service/Dockerfile
      target: development
    command: 'yarn start:dev location-service'
    env_file:
      - apps/location-service/.env
    depends_on:
      - rabbitmq
    volumes:
      - '.:/usr/src/app'
      - /usr/src/app/node_modules
    networks:
      - nana-app
  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - queue_data:/var/lib/rabbitmq
    networks:
      - nana-app

  mongodb-primary:
    image: mongo:6
    environment:
#      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
#      - MONGODB_REPLICA_SET_MODE=primary
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_ROOT_USERNAME=root
#      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    volumes:
      - 'db_data:/data/db'
    ports:
      - '27017:27017'
    networks:
      - nana-app

#  mongodb-secondary:
#    image: docker.io/zcube/bitnami-compat-mongodb:6.0.4
#    depends_on:
#      - mongodb-primary
#    environment:
#      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
#      - MONGODB_REPLICA_SET_MODE=secondary
#      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
#      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
#      - MONGODB_REPLICA_SET_KEY=replicasetkey123
#    networks:
#      - nana-app
#
#  mongodb-arbiter:
#    image: docker.io/zcube/bitnami-compat-mongodb:6.0.4
#    depends_on:
#      - mongodb-primary
#    environment:
#      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
#      - MONGODB_REPLICA_SET_MODE=arbiter
#      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
#      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
#      - MONGODB_REPLICA_SET_KEY=replicasetkey123
#    networks:
#      - nana-app
volumes:
  queue_data:
    driver: local
  db_data:
    driver: local
networks:
  nana-app:
    driver: bridge
